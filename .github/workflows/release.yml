name: release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'

permissions:
  contents: write
  pull-requests: write

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: astral-sh/setup-uv@v3
      - name: Configure git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Install commitizen and gh
        run: |
          uv sync --dev
          sudo apt-get update && sudo apt-get install -y gh
      - name: Fetch tags
        run: git fetch --tags --force --prune
      - name: Bump version and changelog if needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Try incremental changelog; if no previous tags, at least bump version/tag
          if git tag --list 'v*' | grep -q .; then
            uv run cz bump --changelog --yes || echo "No version bump"
          else
            uv run cz bump --yes || echo "No version bump"
          fi
      - name: Push tags
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure tags are pushed explicitly; some runners miss annotated tags with --follow-tags
          git push origin HEAD:main
          git push origin --tags
      - name: Create GitHub Release
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git tag --list 'v*' | sort -V | tail -n1 || true)
          if [ -z "$LATEST_TAG" ]; then
            echo "No tag found after bump, attempting to create initial tag from version in pyproject.toml"
            VERSION=$(grep '^version\s*=\s*"' pyproject.toml | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
            if [ -n "$VERSION" ]; then
              git tag -a "v$VERSION" -m "v$VERSION" || true
              git push origin --tags || true
              LATEST_TAG="v$VERSION"
            fi
          fi
          if [ -n "$LATEST_TAG" ]; then
            gh release create "$LATEST_TAG" -F CHANGELOG.md -t "$LATEST_TAG" --latest || true
          fi
